package com.imooc.db;

import java.beans.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;


//这个类主要的工作是提供连接服务器的驱动
public class DBUtil {
	
	private static final String URL="jdbc:sqlserver://localhost:1433;DatabaseName=BookDB;";
	private static final String USER="sa";
	private static final String PASSWORD="123456";
	

	private static Connection conn = null;
	
	static {
		try {
			//加载驱动程序
			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
		} catch (ClassNotFoundException e) {
			
			e.printStackTrace();
		} 
		// 2.获得数据库的连接

		// 此处需要设置三个常量来存放地址，用户名，还有密码
		try {
		conn = DriverManager.getConnection(URL, USER, PASSWORD);
		} catch (SQLException e) {
	
			e.printStackTrace();
		}

	}
	
	//设置一个外界可以获取这个连接的方法！
	public static Connection getConnection() {
		return conn;
	}
	
	
   public static void main(String[] args) throws Exception {
	  
	 
}
}













package com.imooc.model;

//这个类是对应数据库对象
public class Goddess {

	private Integer id;
	private String name;
	private String sex;
	private Integer age;
	private Integer num;


	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}
	public Integer getAge() {
		return age;
	}

	public void setAge(Integer age) {
		this.age = age;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getSex() {
		return sex;
	}

	public void setSex(String sex) {
		this.sex = sex;
	}

	public Integer getNum() {
		return num;
	}

	public void setNum(Integer num) {
		this.num = num;
	}

	@Override
	public String toString() {
		return "Goddess [id=" + id + ", name=" + name + ", sex=" + sex + ", age=" + age + ", num=" + num + "]";
	}
	
	
	
	
}












package com.imooc.dao;

import java.awt.List;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.imooc.db.DBUtil;
import com.imooc.model.Goddess;

public class GoddessDao {

	public void addGoddess(Goddess g) throws SQLException {
		Connection conn = DBUtil.getConnection();
		String sql = ""+
		           "insert into list"+
				"(id,name,sex,age,num)"+
		           "values("+
				"?,?,?,?,?)";
		
		PreparedStatement ptmt = conn.prepareStatement(sql);
		ptmt.setInt(1,g.getId());
		ptmt.setString(2, g.getName());
		ptmt.setString(3, g.getSex());
		ptmt.setInt(4, g.getAge());
		ptmt.setInt(5, g.getNum());
		
		ptmt.execute();
		
	}
	
    public void updateGoddess(Goddess g) throws SQLException {
	
    	Connection conn = DBUtil.getConnection();
		String sql = ""+
		           " update list" +
				   " set id=?,name=?,sex=?,age=?,num=?" + 
		           " where id=?";
		
		PreparedStatement ptmt = conn.prepareStatement(sql);
		ptmt.setInt(1,g.getId());
		ptmt.setString(2, g.getName());
		ptmt.setString(3, g.getSex());
		ptmt.setInt(4, g.getAge());
		ptmt.setInt(5, g.getNum());
		
		ptmt.execute(); 
		
	}
    
    public void deleteGoddess(Integer id) throws SQLException {
    	Connection conn = DBUtil.getConnection();
		String sql = ""+
		           " delete from list" +
		           " where id=?";
		
		PreparedStatement ptmt = conn.prepareStatement(sql);
		ptmt.setInt(1, id);
		//execute函数用于新增，修改，删除数据库的操作
		ptmt.execute();

    	 
	}
   //这里是对数据库进行指定的操作
   public java.util.List<Goddess> query() throws Exception{
	   //从DBUil类中拿到连接
	   Connection conn = DBUtil.getConnection();
	   
	   java.sql.Statement stmt = conn.createStatement();
	   //此处executeQuery为查询数据库的特定语句
	   ResultSet rs = stmt.executeQuery("select name,sex,num from list");
	   
	   
	   java.util.List<Goddess> gs = new ArrayList<Goddess>();
	   Goddess g = null;
	   
	   //输出打印结果！
	  while(rs.next()) {
		  g = new Goddess();
		  g.setName(rs.getString("name"));
		  g.setSex(rs.getString("sex"));
		  g.setAge(rs.getInt("age"));
		  g.setNum(rs.getInt("num"));
		  
		  gs.add(g);
	   }  
	   //返回集合
	   return gs;
   }
   
   //查询单个女神的信息
    public Goddess set(Integer id) throws Exception {
    	Goddess g= null;
    	Connection conn = DBUtil.getConnection();
		String sql = "" +
		           " select * from list" +
		           " where id=?";
		
		PreparedStatement ptmt = conn.prepareStatement(sql);
		
		
		ptmt.setInt(1, id);
		
		ResultSet rs = ptmt.executeQuery();
    	
		while(rs.next()) {
			g=new Goddess();
			g.setId(rs.getInt("id"));
			g.setName(rs.getString("name"));
			g.setSex(rs.getString("sex"));
			g.setAge(rs.getInt("age"));
			g.setNum(rs.getInt("num"));
		}
    	
    	
		return g;
	}
}













package com.imooc.action;

import java.util.List;

import com.imooc.dao.GoddessDao;
import com.imooc.model.Goddess;

public class GoddessAction {

	public static void main(String[] args) throws Exception {
		GoddessDao g = new GoddessDao();
		
		Goddess g1 = new Goddess();
		
		
		
		g1.setName("迪丽热巴");
		g1.setSex("女");
		g1.setAge(21);
		g1.setNum(10086);
		 
		Goddess g2 = g.set(1);
		System.out.println(g2.toString());
		
		
//		g1.setId(1);
//		g.updateGoddess(g1);
//		
//    	g.addGoddess(g1);
//		

		
		//此处返回的是一个集合
//		List<Goddess> gs = g.query();
//		
//		for (Goddess goddess : gs) {
//			System.out.println(goddess.getName()+","+goddess.getSex()+","+goddess.getNum());
//		}
	}
}

