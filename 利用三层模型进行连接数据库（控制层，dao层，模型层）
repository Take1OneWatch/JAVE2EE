package com.imooc.db;

import java.beans.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;


//这个类主要的工作是提供连接服务器的驱动
public class DBUtil {
	
	private static final String URL="jdbc:sqlserver://localhost:1433;DatabaseName=BookDB;";
	private static final String USER="sa";
	private static final String PASSWORD="123456";
	

	private static Connection conn = null;
	
	static {
	

	}
	
	//设置一个外界可以获取这个连接的方法！
	public static Connection getConnection() {
		try {
			//加载驱动程序
			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
		} catch (ClassNotFoundException e) {	
			e.printStackTrace();
		} 
			// 2.获得数据库的连接
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		// 此处需要设置三个常量来存放地址，用户名，还有密码
	
		return conn;
	}
	
	
   public static void main(String[] args) throws Exception {
	  
	 
}
}














package com.imooc.model;

//这个类是对应数据库对象
public class Goddess {

	private Integer id;
	private String name;
	private String sex;
	private Integer age;
	private Integer num;
	private String zhang;
	private String mi;


	public String getZhang() {
		return zhang;
	}

	public void setZhang(String zhang) {
		this.zhang = zhang;
	}


	public String getMi() {
		return mi;
	}



	public void setMi(String mi) {
		this.mi = mi;
	}



	public Integer getId() {
		return id;
	}

	

	public void setId(Integer id) {
		this.id = id;
	}
	

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getSex() {
		return sex;
	}

	public void setSex(String sex) {
		this.sex = sex;
	}
	
	public Integer getAge() {
		return age;
	}

	public void setAge(Integer age) {
		this.age = age;
	}

	public Integer getNum() {
		return num;
	}

	public void setNum(Integer num) {
		this.num = num;
	}
	
    
	

	@Override
	public String toString() {
		return "Goddess [zhang=" + zhang + ", mi=" + mi + "]";
	}
	
	
	
}













package com.imooc.dao;

import java.awt.List;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import com.imooc.db.DBUtil;
import com.imooc.model.Goddess;
import com.imooc.kong.User;

public class GoddessDao {

	public void addGoddess(Goddess g) throws SQLException {
		Connection conn = DBUtil.getConnection();
		String sql = ""+
		           " insert into list "+
				   " (id,name,sex,age,num) "+
		           " values( "+
				   " ?,?,?,?,?) ";
		
		PreparedStatement ptmt = conn.prepareStatement(sql);
		ptmt.setInt(1,g.getId());
		ptmt.setString(2, g.getName());
		ptmt.setString(3, g.getSex());
		ptmt.setInt(4, g.getAge());
		ptmt.setInt(5, g.getNum());
		ptmt.execute();
		
		conn.close();
	}
	

	
	
    public void updateGoddess(Goddess g) throws SQLException {
    	Connection conn = DBUtil.getConnection();
		String sql = " "+
		           " update list " +
				   " set id=?,name=?,sex=?,age=?,num=? " + 
		           " where id=?";
		
		PreparedStatement ptmt = conn.prepareStatement(sql);
		ptmt.setInt(1,g.getId());
		ptmt.setString(2, g.getName());
		ptmt.setString(3, g.getSex());
		ptmt.setInt(4, g.getAge());
		ptmt.setInt(5, g.getNum());
		ptmt.setInt(6, g.getId());
		ptmt.execute(); 
		conn.close();
		
	}
    
    public void deleteGoddess(Integer id) throws SQLException {
    	Connection conn = DBUtil.getConnection();
		String sql = ""+
		           " delete from list" +
		           " where id=?";
		
		PreparedStatement ptmt = conn.prepareStatement(sql);
		ptmt.setInt(1, id);
		//execute函数用于新增，修改，删除数据库的操作
		ptmt.execute();
		conn.close();

    	 
	}
//   这里是对数据库进行指定的操作
//    查询单个女神的信息
//   public java.util.List<Goddess> query(String name) throws Exception{
//	   java.util.List<Goddess> gs = new ArrayList<Goddess>();
//	   //从DBUil类中拿到连接
//	   Connection conn = DBUtil.getConnection();
//
//	   StringBuilder x = new StringBuilder();
//	   x.append(" select * from list ");
//	   x.append(" where name = ? ");
//	   
//	   PreparedStatement stmt = conn.prepareStatement(x.toString());
//	   stmt.setString(1,name);
//	   //此处executeQuery为查询数据库的特定语句
//	   ResultSet rs = stmt.executeQuery();
//
//	   Goddess g = null;
//	   
//	   //输出打印结果！
//	  while(rs.next()) {
//		  g = new Goddess();
//		  g.setId(rs.getInt("id"));
//		  g.setName(rs.getString("name"));
//		  g.setSex(rs.getString("sex"));
//		  g.setAge(rs.getInt("age"));
//		  g.setNum(rs.getInt("num"));
//		  gs.add(g);  
//	   }  
//	   //返回集合
//	   return gs;
//   }
   
   
   
  //读取用户数据库，获取账号和密码
   public java.util.List<Goddess> query(String zhang) throws Exception{
	   java.util.List<Goddess> gs1 = new ArrayList<Goddess>();
	   //从DBUil类中拿到连接
	   Connection conn = DBUtil.getConnection();
	   StringBuilder x = new StringBuilder();
	   x.append(" select * from Dome ");
	   x.append(" where zhang = ? ");
	   
	   PreparedStatement stmt = conn.prepareStatement(x.toString());
	   stmt.setString(1,zhang);
	   //此处executeQuery为查询数据库的特定语句
	   ResultSet rs = stmt.executeQuery();
	   Goddess g1 = null;
	   
	   //输出打印结果！
	  while(rs.next()) {
		  g1 = new Goddess();
		  g1.setZhang(rs.getString("zhang"));
		  g1.setMi(rs.getString("pwd"));
		  gs1.add(g1); 
	   }  
	  conn.close();
	  rs.close();
	   //返回集合
	   return gs1;
   }

   
   
    //查询全部数据
    public void cha() throws Exception{
    	 Connection conn = DBUtil.getConnection();
    	 java.sql.Statement stmt = conn.createStatement();
  	     ResultSet rs = stmt.executeQuery("select * from 读者信息");
  	   //输出打印结果！
  	  while(rs.next()) {
  		System.out.println(rs.getString("借阅证号")+","+rs.getString("姓名")+","+rs.getString("性别")+","+
  	                       rs.getString("单位")+","+rs.getString("联系电话")+","+rs.getString("身份证号码")
  	                     +","+rs.getString("借阅证件类型")+","+rs.getDate("办卡时间")+","+
  	                       rs.getInt("卡状态")
  				);
  	System.out.println("");
  	   }
  	  rs.close();
  	  conn.close();
    }
    
    
 //写入账号信息（用于注册界面）
 public void addGoddess1(Goddess g) throws SQLException {
		Connection conn = DBUtil.getConnection();
		String sql = " "+
		           " insert into Dome"+
				   " (zhang,pwd) "+
		           " values( "+
				   " ?,?) ";
		
		PreparedStatement ptmt = conn.prepareStatement(sql);
		ptmt.setString(1,g.getZhang());
		ptmt.setString(2,g.getMi());
		ptmt.execute();
		
		
	  	  conn.close();
	}
 
 
 
 
//      public java.util.List<Goddess> get(String zhang) throws SQLException{
//    	  java.util.List<Goddess> gs = new ArrayList<Goddess>();
//    	 Connection conn = DBUtil.getConnection();
//    	 StringBuilder x = new StringBuilder();
//  	   x.append(" select * from Dome ");
//  	   x.append(" where zhang = ? ");
//  	   
//  	   PreparedStatement stmt = conn.prepareStatement(x.toString());
//  		
//  		PreparedStatement ptmt = conn.prepareStatement(x.toString());
//  		ptmt.setString(1,zhang);
//  		ResultSet rs = ptmt.executeQuery();
//  		Goddess g1 = null;
//  		while(rs.next()) {
//  			g1 = new Goddess();
//  			g1.setZhang(rs.getString("zhang"));
//      		g1.setMi(rs.getString("pwd"));
//  			gs.add(g1);
//  			
//  		} 
//		return gs;  
//      } 




    
    

}















package com.imooc.action;

import java.util.List;
import com.imooc.dao.GoddessDao;
import com.imooc.model.Goddess;
import com.imooc.kong.SignIn;
import com.imooc.kong.User;
import java.util.*;


public class GoddessAction {

	String x,x1;
	
//	public void cha() throws Exception{
//		//此处为特定查询
//	
//		GoddessDao g = new GoddessDao();
//		List<Goddess> gs = g.query("垃圾面");
//			System.out.println(gs.toString());	
//		//	System.out.println(gs.get(0).getAge());	
//			int x = gs.get(0).getAge();
//			System.out.println(x);
//	}
	
	public void cha() throws Exception{
		String x;
		GoddessDao g = new GoddessDao();
		List<Goddess> gs = g.query("2");
		
			System.out.println(gs.get(0).getMi());	
		//	String x = gs.get(0).getAge();
		//	System.out.println(x);
		
//		
//		Goddess g2 = g.get("2");
//		x = g2.getMi();
//		System.out.println(x);
//		System.out.println(g2.toString());
//		System.out.println("111");
	}
	
//	public void cha1() throws Exception{
//		//此处为特定查询
//	
//		GoddessDao g = new GoddessDao();
//		List<Goddess> gs = g.query("2");
//			System.out.println(gs.toString());	
//		//	System.out.println(gs.get(0).getAge());	
//			int x = gs.get(0).getAge();
//			System.out.println(x);
//	}
//	
	
	
	
	public void shan() throws Exception {
		//删除数据，括号内是删除的数据的ID
		GoddessDao g = new GoddessDao();
		Goddess g1 = new Goddess();
		g.deleteGoddess(5);
		System.out.println("删除成功！");
	}
	
	
	public void zeng() throws Exception {
		GoddessDao g = new GoddessDao();
		Goddess g1 = new Goddess();
		g1.setId(1);
		g1.setName("马面");
		g1.setSex("女");
		g1.setAge(21);
		g1.setNum(10086);
      	g.addGoddess(g1);
      	System.out.println("成功添加");
	}
	
	
	public void zeng1() throws Exception {
	    SignIn t = new SignIn();
		GoddessDao g = new GoddessDao();
		Goddess g1 = new Goddess();
		g.addGoddess(g1);
		g1.setZhang("");
	//	g1.setKey("45645456456");
      	System.out.println("成功添加");
	}
	
	
	
	
	
	public void gai() throws Exception{
		GoddessDao g = new GoddessDao();
		Goddess g1 = new Goddess();
		g1.setId(1);
		g1.setName("垃圾级");
		g1.setSex("女");
		g1.setAge(21);
		g1.setNum(10086);
		 //查询单个数据信息，并打印输出
		g.updateGoddess(g1);
		System.out.println("修改成功！");
	}
	
	
	public static void main(String[] args) throws Exception {
	
		System.out.println("增删改查的顺序依次是：1，2，3，4");
		Scanner x1= new Scanner(System.in);
		int x =x1.nextInt();
		if(x==1) {
			GoddessAction it = new GoddessAction();
			it.zeng();
		}
		if(x==2) {
			GoddessAction it2 = new GoddessAction();
			it2.shan();
		}
		if(x==3) {
			GoddessAction it3 = new GoddessAction();
			it3.gai();
		}
		
		if(x==4) {
			GoddessAction it4 = new GoddessAction();
			it4.cha();
			
		}

//		g.updateGoddess(g1);
//		

//		

		
		//此处返回的是一个集合
//		List<Goddess> gs = g.query();
//		
//		for (Goddess goddess : gs) {
//			System.out.println(goddess.getName()+","+goddess.getSex()+","+goddess.getNum());
		}
	}
